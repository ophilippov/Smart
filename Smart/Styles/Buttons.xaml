<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:Smart">

    <ResourceDictionary.MergedDictionaries>
        <!-- The order is important-->
        <ResourceDictionary Source="Fonts.xaml"/>
        <ResourceDictionary Source="Colors.xaml"/>
        <ResourceDictionary Source="Texts.xaml"/>
    </ResourceDictionary.MergedDictionaries>

    <!--Hoverless button-->
    <Style TargetType="{x:Type Button}" x:Key="Hoverless">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}">
                        <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--System icon button-->
    <Style TargetType="{x:Type Button}" x:Key="SystemIconButton" BasedOn="{StaticResource Hoverless}">
        <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True"/>
        <Setter Property="Padding" Value="8,4,5,3"/>

    </Style>

    <!--Window control button-->
    <Style TargetType="{x:Type Button}" x:Key="WindowControlButton" >
        <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="FontSize" Value="{StaticResource FontSizePreLarge}"/>
        <Setter Property="Foreground" Value="{StaticResource ForegroundLightBrush}"/>
        <Setter Property="FontFamily" Value="{StaticResource MaterialDesign}"/>
        <Setter Property="Width" Value="35"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border 
                            Background="{TemplateBinding Background}"
                            HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalAlignment}">

                        <TextBlock Margin="{TemplateBinding Padding}"
                                   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                   VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
                                   Text="{TemplateBinding Content}"
                                   FontFamily="{TemplateBinding FontFamily}"
                                   FontSize="{TemplateBinding FontSize}"
                                   Foreground="{TemplateBinding Foreground}"
                               />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource WindowBlueHoverBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Window close button-->
    <Style TargetType="{x:Type Button}" x:Key="WindowCloseButton">
        <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Foreground" Value="{StaticResource ForegroundLightBrush}"/>
        <Setter Property="FontFamily" Value="{StaticResource MaterialDesign}"/>
        <Setter Property="Width" Value="35"/>
        <Setter Property="Padding" Value="0 0 0 0"/>
        <Setter Property="FontSize" Value="{StaticResource FontSizePreLarge}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Margin="{TemplateBinding Padding}"
                            Background="{TemplateBinding Background}"
                            HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalAlignment}">

                        <TextBlock  
                               HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                               VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                               Text="{TemplateBinding Content}"
                               FontFamily="{TemplateBinding FontFamily}"
                               FontSize="{TemplateBinding FontSize}" 
                            Foreground="{TemplateBinding Foreground}">
                        </TextBlock>

                    </Border>
                </ControlTemplate>
            </Setter.Value>

        </Setter>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource WindowRedHoverBrush}" />
            </Trigger>
        </Style.Triggers>


    </Style>


    <!-- DialogWindow close button-->
    <Style TargetType="{x:Type Button}" x:Key="DialogWindowCloseButton">
        <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Foreground" Value="{StaticResource DialogCloseNormalBrush}"/>
        <Setter Property="FontFamily" Value="{StaticResource MaterialDesign}"/>
        <Setter Property="Width" Value="35"/>
        <Setter Property="Padding" Value="0 0 0 0"/>
        <Setter Property="FontSize" Value="{StaticResource FontSizePreLarge}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Margin="{TemplateBinding Padding}"
                            Background="{TemplateBinding Background}"
                            HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalAlignment}">

                        <TextBlock  
                               HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                               VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                               Text="{TemplateBinding Content}"
                               FontFamily="{TemplateBinding FontFamily}"
                               FontSize="{TemplateBinding FontSize}" 
                               Foreground="{TemplateBinding Foreground}">
                        </TextBlock>

                    </Border>
                </ControlTemplate>
            </Setter.Value>

        </Setter>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{StaticResource DialogCloseHoverBrush}" />
            </Trigger>
        </Style.Triggers>


    </Style>

    <!-- Simple close button-->
    <Style TargetType="{x:Type Button}" x:Key="SimpleCloseButton">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Foreground" Value="{StaticResource CloseButtonNormalBrush}"/>
        <Setter Property="FontFamily" Value="{StaticResource MaterialDesign}"/>
        <Setter Property="Width" Value="30"/>
        <Setter Property="Padding" Value="0 0 0 0"/>
        <Setter Property="FontSize" Value="{StaticResource FontSizePreLarge}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Margin="{TemplateBinding Padding}"
                            Background="{TemplateBinding Background}"
                            HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalAlignment}">

                        <TextBlock  
                               HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                               VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                               Text="{TemplateBinding Content}"
                               FontFamily="{TemplateBinding FontFamily}"
                               FontSize="{TemplateBinding FontSize}"
                               Foreground="{TemplateBinding Foreground}">


                        </TextBlock>

                    </Border>
                </ControlTemplate>
            </Setter.Value>

        </Setter>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{StaticResource CloseButtonHoverBrush}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Foreground" Value="{StaticResource CloseButtonPressedBrush}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{StaticResource CloseButtonDisabledBrush}" />
            </Trigger>
        </Style.Triggers>


    </Style>

   

    <!-- Control Template for a button in defaulted state-->
    <ControlTemplate TargetType="{x:Type ButtonBase}" x:Key="CommonButtonDefaultTemplate">
        
        <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{StaticResource ButtonDefaultBrush}"
                            SnapsToDevicePixels="True">
            <Grid>
                <!-- Regular Text-->
                <TextBlock Text="{TemplateBinding Content}"
                       FontFamily="{TemplateBinding FontFamily}"
                       Foreground="{TemplateBinding Foreground}"
                       Focusable="False"
                       Visibility="{TemplateBinding local:IsBusyProperty.Value, Converter={local:BooleanToVisibilityValueConverter}}"
                       HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                       Margin="{TemplateBinding Padding}"
                       SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                       VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>

                <!-- Spinner -->
                <TextBlock Style="{StaticResource SpinningText}"
                        Text="{StaticResource SpinCircleIcon}"
                        Foreground="{TemplateBinding Foreground}"
                        Focusable="False"
                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                        Visibility="{TemplateBinding local:IsBusyProperty.Value, Converter={local:BooleanToVisibilityValueConverter},ConverterParameter=True}"
                               />
            </Grid>

        </Border>

        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" TargetName="border" Value="{StaticResource ButtonDisabledBrush}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True" >
                <Setter Property="Background" TargetName="border" Value="{StaticResource ButtonPressedBrush}"/>
            </Trigger>

            <EventTrigger RoutedEvent="MouseEnter">
                <BeginStoryboard>
                    <Storyboard>
                        <ColorAnimation To="{StaticResource ButtonHover}" Duration="0:0:0.2" Storyboard.TargetName="border" Storyboard.TargetProperty="Background.Color"/>
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>


            <EventTrigger RoutedEvent="MouseLeave">
                <BeginStoryboard>
                    <Storyboard>
                        <ColorAnimation To="{StaticResource ButtonDefault}" Duration="0:0:0.2" Storyboard.TargetName="border" Storyboard.TargetProperty="Background.Color"/>
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>

        </ControlTemplate.Triggers>
    </ControlTemplate>


    <!-- Control Template for a button in normal state-->
    <ControlTemplate TargetType="{x:Type ButtonBase}" x:Key="CommonButtonTemplate">
        <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{StaticResource ButtonNormalBrush}"
                            SnapsToDevicePixels="True">
            <Grid>
                <!--Regular text-->
                <TextBlock Text="{TemplateBinding Content}"
                                   FontFamily="{TemplateBinding FontFamily}"
                                   Foreground="{TemplateBinding Foreground}"
                                   Focusable="False"
                                   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                   Margin="{TemplateBinding Padding}"
                                   SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                   VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                   Visibility="{TemplateBinding local:IsBusyProperty.Value, Converter={local:BooleanToVisibilityValueConverter}}"
                                            />

                <!-- Spinner -->
                <TextBlock Style="{StaticResource SpinningText}"
                        Text="{StaticResource SpinCircleIcon}"
                        Foreground="{TemplateBinding Foreground}"
                        Focusable="False"
                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                        Visibility="{TemplateBinding local:IsBusyProperty.Value, Converter={local:BooleanToVisibilityValueConverter},ConverterParameter=True}"
                               />
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <EventTrigger RoutedEvent="MouseEnter">
                <BeginStoryboard>
                    <Storyboard>
                        <ColorAnimation To="{StaticResource ButtonHover}" Duration="0:0:0.2" Storyboard.TargetName="border" Storyboard.TargetProperty="Background.Color"/>
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>

            <EventTrigger RoutedEvent="MouseLeave">
                <BeginStoryboard>
                    <Storyboard>
                        <ColorAnimation To="{StaticResource ButtonNormal}" Duration="0:0:0.2" Storyboard.TargetName="border" Storyboard.TargetProperty="Background.Color"/>
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>


            <Trigger Property="IsPressed" Value="True" >
                <Setter Property="Background" TargetName="border" Value="{StaticResource ButtonPressedBrush}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" TargetName="border" Value="{StaticResource ButtonDisabledBrush}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- Common Button style -->
    <Style TargetType="{x:Type Button}" x:Key="ButtonCommon">
        
        <Setter Property="Foreground" Value="{StaticResource ForegroundLightBrush}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="FontSize" Value="{StaticResource FontSizeRegular}"/>
        <Setter Property="FontFamily" Value="{StaticResource SegoeUILight}"/>
        <Setter Property="Padding" Value="10 0 10 1"/>
        <Setter Property="MinWidth" Value="100"/>
        <Setter Property="MinHeight" Value="25"/>
        <Setter Property="Margin" Value="5"/>
        <Setter Property="local:IsBusyProperty.Value" Value="False"/>
        <Setter Property="Template" Value="{StaticResource CommonButtonTemplate}"/>

        <Style.Triggers>
            <Trigger Property="IsDefault" Value="True">
                <Setter Property="Template" Value="{StaticResource CommonButtonDefaultTemplate}"/>
            </Trigger>
            
        </Style.Triggers>


    </Style>

    <!-- Text button in the normal state-->
    <Style TargetType="{x:Type Button}" x:Key="TextButton">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{StaticResource TextButtonNormalBrush}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="FontSize" Value="{StaticResource FontSizeRegular}"/>
        <Setter Property="FontFamily" Value="{StaticResource SegoeUILight}"/>
        <Setter Property="Padding" Value="10 0 10 1"/>
        <Setter Property="MinWidth" Value="50"/>
        <Setter Property="MinHeight" Value="25"/>
        <Setter Property="Margin" Value="5"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">

                    <StackPanel VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                Margin="{TemplateBinding Padding}">
                        <TextBlock x:Name="text"
                                   Foreground="{TemplateBinding Foreground}"
                                   Text="{TemplateBinding Content}"
                                   FontFamily="{TemplateBinding FontFamily}"
                                   Focusable="False"
                                   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                   SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                   VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        <Border x:Name="border" Height="1"
                                    Background="{TemplateBinding Foreground}"
                                    SnapsToDevicePixels="True"
                                    Margin="-3 -1 -3 0 "
                                    />
                    </StackPanel>


                    <ControlTemplate.Triggers>

                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource TextButtonHoverBrush}"/>
                            <Setter Property="TextBlock.Foreground" TargetName="text" Value="{StaticResource TextButtonHoverBrush}"/>
                        </Trigger>

                        <Trigger Property="IsPressed" Value="True" >
                            <Setter Property="Background" TargetName="border" Value="{StaticResource TextButtonPressedBrush}"/>
                            <Setter Property="TextBlock.Foreground" TargetName="text" Value="{StaticResource TextButtonPressedBrush}"/>
                            
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource TextButtonDisabledBrush}"/>
                            <Setter Property="TextBlock.Foreground" TargetName="text" Value="{StaticResource TextButtonDisabledBrush }"/>

                        </Trigger>

                       
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsDefault" Value="True">
                <Setter Property="Foreground" Value="{StaticResource TextButtonDefaultBrush}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Icon button MD in the normal state-->
    <Style TargetType="{x:Type Button}" x:Key="IconButtonMD">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{StaticResource TextButtonNormalBrush}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="FontSize" Value="{StaticResource FontSizePreLarge}"/>
        <Setter Property="FontFamily" Value="{StaticResource MaterialDesign}"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">


                    <TextBlock x:Name="text"
                                   Foreground="{TemplateBinding Foreground}"
                                   Text="{TemplateBinding Content}"
                                   FontFamily="{TemplateBinding FontFamily}"
                                   Focusable="False"
                                   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                   Margin="{TemplateBinding Padding}"
                                   SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                   VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                   Height="{TemplateBinding Height}"/>




                    <ControlTemplate.Triggers>

                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="TextBlock.Foreground" TargetName="text" Value="{StaticResource TextButtonHoverBrush}"/>
                        </Trigger>

                        <Trigger Property="IsPressed" Value="True" >
                            <Setter Property="TextBlock.Foreground" TargetName="text" Value="{StaticResource TextButtonPressedBrush}"/>
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="TextBlock.Foreground" TargetName="text" Value="{StaticResource TextButtonDisabledBrush }"/>

                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- BigIcon button in the normal state-->
    <Style TargetType="{x:Type Button}" x:Key="BigIconButton">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="VerticalContentAlignment" Value="Bottom"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{StaticResource ForegroundDarkBrush}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="FontSize" Value="{StaticResource FontSizeVeryLarge}"/>
        <Setter Property="FontFamily" Value="{StaticResource MaterialDesign}"/>
        <Setter Property="Padding" Value="5 0 5 3"/>
        <Setter Property="Width" Value="60"/>
        <Setter Property="MinWidth" Value="50"/>
        <Setter Property="MinHeight" Value="50"/>
        <Setter Property="Margin" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            SnapsToDevicePixels="True">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*"/>
                                <RowDefinition Height="50"/>
                                <RowDefinition Height="*"/>
                                <RowDefinition Height="Auto" MaxHeight="31"/>
                            </Grid.RowDefinitions>


                            <TextBlock Grid.Row="1"
                                   x:Name="textIcon"
                                   FontSize="{TemplateBinding FontSize}"
                                   HorizontalAlignment="Center"
                                   VerticalAlignment="Center"
                                   Text="{TemplateBinding Tag}"
                                   FontFamily="{TemplateBinding FontFamily}"/>



                            <TextBlock Grid.Row="3"
                                       x:Name="textContent"
                                Text="{TemplateBinding Content}"
                                   FontFamily="{StaticResource SegoeUILight}"
                                       FontSize="{StaticResource FontSizeRegular}"
                                   Foreground="{TemplateBinding Foreground}"
                                   Focusable="False"
                                   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                   Margin="{TemplateBinding Padding}"
                                   SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                   VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                       Visibility="Visible"
                                   TextWrapping="Wrap" TextAlignment="Center" LineHeight="14" LineStackingStrategy="BlockLineHeight"/>

                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <EventTrigger RoutedEvent="MouseEnter">
                            <BeginStoryboard>
                                <Storyboard>
                                    <ColorAnimation To="{StaticResource MenuButtonHover}"
                                                    Duration="0:0:0.2"
                                                    Storyboard.TargetName="border"
                                                    Storyboard.TargetProperty="Background.Color"/>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>

                        <EventTrigger RoutedEvent="MouseLeave">
                            <BeginStoryboard>
                                <Storyboard>
                                    <ColorAnimation To="Transparent"
                                                    Duration="0:0:0.2" 
                                                    Storyboard.TargetName="border"
                                                    Storyboard.TargetProperty="Background.Color"/>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>


                        <Trigger Property="IsPressed" Value="True" >
                            <Setter Property="Foreground"
                                    TargetName="textIcon"
                                    Value="{StaticResource MenuButtonPressedBrush}"/>
                            <Setter Property="Foreground"
                                    TargetName="textContent"
                                    Value="{StaticResource MenuButtonPressedBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground"
                                    TargetName="textIcon"
                                    Value="{StaticResource MenuButtonDisabledBrush}"/>
                            <Setter Property="Foreground"
                                    TargetName="textContent"
                                    Value="{StaticResource MenuButtonDisabledBrush}"/>
                        </Trigger>
                        <Trigger Property="HasContent" Value="false">
                            <Setter Property="Visibility" TargetName="textContent" Value="Collapsed"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- SmallIcon button in the normal state-->
    <Style TargetType="{x:Type Button}" x:Key="SmallIconButton">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="VerticalContentAlignment" Value="Bottom"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{StaticResource ForegroundDarkBrush}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="FontSize" Value="{StaticResource FontSizePreLarge}"/>
        <Setter Property="FontFamily" Value="{StaticResource MaterialDesign}"/>
        <Setter Property="Padding" Value="5 0 7 0"/>
        <Setter Property="Height" Value="25"/>
        <Setter Property="MaxHeight" Value="25"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            SnapsToDevicePixels="True">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="{TemplateBinding Padding,Converter={local:MarginLeftToWidthValueConverter}}"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>


                            <TextBlock Grid.Column="1"
                                   x:Name="textIcon"
                                   FontSize="{TemplateBinding FontSize}"
                                   HorizontalAlignment="Left"
                                   VerticalAlignment="Center"
                                   Text="{TemplateBinding Tag}"
                                   FontFamily="{TemplateBinding FontFamily}"
                                       
                                      />



                            <TextBlock Grid.Column="2"
                                       x:Name="textContent"
                                Text="{TemplateBinding Content}"
                                   FontFamily="{StaticResource SegoeUILight}"
                                   FontSize="{StaticResource FontSizeRegular}"
                                   Foreground="{TemplateBinding Foreground}"
                                   Focusable="False"
                                   HorizontalAlignment="Left"
                                   Margin="{TemplateBinding Padding}"
                                   SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                   VerticalAlignment="Center"
                                       Visibility="Visible"
                                   TextWrapping="NoWrap"
                                       TextAlignment="Left"
                                       LineHeight="14"
                                       LineStackingStrategy="BlockLineHeight"/>

                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <EventTrigger RoutedEvent="MouseEnter">
                            <BeginStoryboard>
                                <Storyboard>
                                    <ColorAnimation To="{StaticResource MenuButtonHover}"
                                                    Duration="0:0:0.2"
                                                    Storyboard.TargetName="border"
                                                    Storyboard.TargetProperty="Background.Color"/>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>

                        <EventTrigger RoutedEvent="MouseLeave">
                            <BeginStoryboard>
                                <Storyboard>
                                    <ColorAnimation To="Transparent"
                                                    Duration="0:0:0.2" 
                                                    Storyboard.TargetName="border"
                                                    Storyboard.TargetProperty="Background.Color"/>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>


                        <Trigger Property="IsPressed" Value="True" >
                            <Setter Property="Foreground"
                                    TargetName="textIcon"
                                    Value="{StaticResource MenuButtonPressedBrush}"/>
                            <Setter Property="Foreground"
                                    TargetName="textContent"
                                    Value="{StaticResource MenuButtonPressedBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground"
                                    TargetName="textIcon"
                                    Value="{StaticResource MenuButtonDisabledBrush}"/>
                            <Setter Property="Foreground"
                                    TargetName="textContent"
                                    Value="{StaticResource MenuButtonDisabledBrush}"/>
                        </Trigger>
                        <Trigger Property="HasContent" Value="false">
                            <Setter Property="Visibility" TargetName="textContent" Value="Collapsed"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Double icon toogle button Style -->
    <Style x:Key="ToggleButtonDoubleIconStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Foreground" Value="{StaticResource ForegroundDarkBrush}"/>
        <Setter Property="FontFamily" Value="{StaticResource MaterialDesign}"/>
        <Setter Property="FontSize" Value="{StaticResource FontSizeSemiLarge}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">

                    <Border x:Name="border"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}" 
                            Background="{TemplateBinding Background}"
                            SnapsToDevicePixels="True">
                        <Grid>
                            <TextBlock x:Name="contentIcon" FontFamily="{TemplateBinding FontFamily}"
                                   FontSize="{TemplateBinding FontSize}"
                                   Foreground="{TemplateBinding Foreground}"
                                   Focusable="False"
                                   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                   Margin="{TemplateBinding Padding}"
                                   Text="{TemplateBinding Content}"
                                   SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                   VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                   Visibility="Visible"/>
                            <TextBlock x:Name="tagIcon" FontFamily="{TemplateBinding FontFamily}"
                                   FontSize="{TemplateBinding FontSize}"
                                   Foreground="{TemplateBinding Foreground}"
                                   Focusable="False"
                                   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                   Margin="{TemplateBinding Padding}"
                                   Text="{TemplateBinding Tag}"
                                   SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                   VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                   Visibility="Collapsed"/>
                        </Grid>

                    </Border>

                    <ControlTemplate.Triggers>

                        <Trigger Property="IsMouseOver" Value="true">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation Duration="0:0:0.2"
                                                        To="{StaticResource MenuButtonHover}"
                                                        Storyboard.TargetName="border"
                                                        Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)"/>

                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation Duration="0:0:0.2"
                                                        To="Transparent"
                                                        Storyboard.TargetName="border"
                                                        Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>

                        </Trigger>

                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Foreground"
                                    TargetName="contentIcon"
                                    Value="{StaticResource MenuButtonPressedBrush}"/>
                            <Setter Property="Foreground"
                                    TargetName="tagIcon"
                                    Value="{StaticResource MenuButtonPressedBrush}"/>
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" 
                                    TargetName="contentIcon"
                                    Value="{StaticResource MenuButtonDisabledBrush}"/>
                            <Setter Property="Foreground" 
                                    TargetName="tagIcon"
                                    Value="{StaticResource MenuButtonDisabledBrush}"/>
                        </Trigger>

                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Visibility" TargetName="contentIcon" Value="Collapsed"/>
                            <Setter Property="Visibility" TargetName="tagIcon" Value="Visible"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>